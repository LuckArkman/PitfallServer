using Services;
using Data;
using Npgsql;
using Microsoft.AspNetCore.Identity; // Importante para IPasswordHasher
using DTOs; // Importante para a classe User

var builder = WebApplication.CreateBuilder(args);

// --- üîπ Obter Connection Strings ---
var defaultConnection = builder.Configuration.GetConnectionString("DefaultConnection")
    ?? throw new InvalidOperationException("Connection string 'DefaultConnection' n√£o configurada.");

var sessionConnection = builder.Configuration.GetConnectionString("SessionConnection")
    ?? "Data Source=sessions.db"; // fallback para SQLite

// --- üîπ Registrar servi√ßos diretos (sem EF) ---
builder.Services.AddScoped<SessionService>(_ => new SessionService(sessionConnection));
builder.Services.AddScoped<PixService>();
// üîë MUDAN√áA CR√çTICA: Registrar o IPasswordHasher para ser injetado no AuthService
// Usamos AddSingleton porque a l√≥gica do hasher n√£o tem estado e n√£o precisa ser refeita a cada requisi√ß√£o.
builder.Services.AddSingleton<IPasswordHasher<User>, PasswordHasher<User>>();
// Registrar AuthService (que agora depende de IPasswordHasher<User>)
builder.Services.AddScoped<AuthService>();
builder.Services.AddScoped<TokenService>();
builder.Services.AddScoped<WalletRepository>(_ => new WalletRepository(defaultConnection));
builder.Services.AddScoped<WalletService>(_ => new WalletService(defaultConnection));
builder.Services.AddScoped<AdminAuthService>();
builder.Services.AddScoped<AdminTokenService>();

// --- üîπ HttpClient (para PixService) ---
builder.Services.AddHttpClient<PixService>(client =>
{
    client.BaseAddress = new Uri(builder.Configuration["FeiPay:BaseUrl"] ?? "https://feipay.com.br/api/");
});

// --- üîπ Configurar CORS ---
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowAll", policy =>
    {
        policy.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader();
    });
});

// --- üîπ Infraestrutura padr√£o ---
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowWebGL", policy =>
    {
        policy.WithOrigins(
                "https://pitfall-build.vercel.app",
                "https://feipay.com.br"
            )
            .AllowAnyHeader()
            .AllowAnyMethod();
    });
});
// --- üîπ Inicializa√ß√£o ---
var app = builder.Build();

app.UseCors("AllowWebGL");
// --- üîπ Timer para expirar PIX ---
var timer = new PeriodicTimer(TimeSpan.FromMinutes(5));
_ = Task.Run(async () =>
{
    while (await timer.WaitForNextTickAsync())
    {
        using var scope = app.Services.CreateScope();
        var pixService = scope.ServiceProvider.GetRequiredService<PixService>();
        await pixService.CancelExpiredPixTransactionsAsync(15);
    }
});

// --- üîπ Criar tabelas se necess√°rio ---
using (var conn = new NpgsqlConnection(defaultConnection))
{
    await conn.OpenAsync();

    var cmd = new NpgsqlCommand(@"
        CREATE TABLE IF NOT EXISTS public.users (
            id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            email TEXT NOT NULL UNIQUE,
            name TEXT NOT NULL,
            -- üîë MUDAN√áA DE SCHEMA: Certificando que 'password_hash' seja TEXT 
            -- para armazenar o hash longo do Identity.
            password_hash TEXT NOT NULL, 
            is_influencer BOOLEAN NOT NULL DEFAULT FALSE,
            status TEXT NOT NULL DEFAULT 'active',
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        );

        CREATE TABLE IF NOT EXISTS public.pix_transactions (
            id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            user_id BIGINT NOT NULL REFERENCES public.users(id),
            type TEXT NOT NULL DEFAULT 'PIX_IN',
            id_transaction TEXT NOT NULL UNIQUE,
            amount NUMERIC(18,2) NOT NULL,
            status TEXT NOT NULL DEFAULT 'pending',
            pix_key TEXT NOT NULL,
            pix_key_type TEXT NOT NULL,
            qr_code TEXT NOT NULL,
            qr_code_image_url TEXT NOT NULL,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
            paid_at TIMESTAMP WITH TIME ZONE,
            CONSTRAINT chk_pix_transaction_status CHECK (status IN ('pending', 'Complete', 'Canceled')),
            CONSTRAINT chk_pix_transaction_type CHECK (type IN ('PIX_IN', 'PIX_OUT'))
        );

        CREATE TABLE IF NOT EXISTS public.wallets (
            ""UserId"" BIGINT PRIMARY KEY,
            ""Currency"" TEXT NOT NULL DEFAULT 'BRL',
            ""Balance"" NUMERIC(18,2) NOT NULL DEFAULT 0,
            ""BalanceWithdrawal"" NUMERIC(18,2) NOT NULL DEFAULT 0,
            ""BalanceBonus"" NUMERIC(18,2) NOT NULL DEFAULT 0,
            ""UpdatedAt"" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        );

        CREATE TABLE IF NOT EXISTS public.wallet_ledger (
            ""id"" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            ""UserId"" BIGINT NOT NULL REFERENCES public.wallets(""UserId""),
            ""Type"" TEXT NOT NULL,
            ""Amount"" NUMERIC(18,2) NOT NULL,
            ""BalanceAfter"" NUMERIC(18,2) NOT NULL,
            ""GameRoundId"" BIGINT,
            ""Metadata"" TEXT DEFAULT '{}',
            ""CreatedAt"" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
        );
        CREATE TABLE IF NOT EXISTS public.""Admins"" (
            ""Id"" BIGSERIAL PRIMARY KEY,
            ""Email"" TEXT NOT NULL UNIQUE,
            ""PasswordHash"" TEXT NOT NULL,
            ""Role"" TEXT NOT NULL DEFAULT 'admin',
            ""CreatedAt"" TIMESTAMPTZ NOT NULL DEFAULT NOW(),
            ""LastLoginAt"" TIMESTAMPTZ NULL
        );

    ", conn);

    await cmd.ExecuteNonQueryAsync();
}

// --- üîπ Pipeline HTTP ---
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();
app.UseCors("AllowAll");

app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();

app.Run();